1：通过git init命令把这个目录变成Git可以管理的仓库：
	$ git init
2：用命令git add告诉Git，把文件添加到仓库：

	$ git add readme.txt
3：用命令git commit告诉Git，把文件提交到仓库：
	$ git commit -m "wrote a readme file"
4：为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
	$ git add file1.txt
	$ git add file2.txt file3.txt
	$ git commit -m "add 3 files."
5：运行git status命令看看结果：			git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
	$ git status
	On branch master
	Changes not staged for commit:
	(use "git add <file>..." to update what will be committed)
	(use "git checkout -- <file>..." to discard changes in working directory)
	
		modified:   readme.txt

	no changes added to commit (use "git add" and/or "git commit -a")
6：虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，
	需要用git diff这个命令看看：		git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个distributed单词
		$ git diff readme.txt 
7：版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：
		$ git log
		如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
		$ git log --pretty=oneline
8：现在，我们要把当前版本append GPL回退到上一个版本add distributed，就可以使用git reset命令：

	$ git reset --hard HEAD^
	HEAD is now at e475afc add distributed
	也可以
	$ git reset --hard 1094a按照版本号回退
9：Git提供了一个命令git reflog用来记录你的每一次命令：
	$ git reflog
		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
10：提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
	$ git diff HEAD -- readme.txt 
11：Git会告诉你，git checkout -- file可以丢弃工作区的修改：

	$ git checkout -- readme.txt
		命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

		总之，就是让这个文件回到最近一次git commit或git add时的状态。
12：Git同样告诉我们，用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：

	$ git reset HEAD readme.txt
	git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
13：删除了一个文件：现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

	$ git rm test.txt
	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

	$ git checkout -- test.txt
14：生成远端秘钥
	$ ssh-keygen -t rsa -C "your_email@youremail.com"
15：要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git
16：关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
		把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。	
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改
17：我们创建dev分支，然后切换到dev分支：

	$ git checkout -b dev
		git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

		$ git branch dev
		$ git checkout dev
18：git branch命令查看当前分支：

	$ git branch
		* dev
		master
			git branch命令会列出所有分支，当前分支前面会标一个*号。
19：dev分支的工作完成，我们就可以切换回master分支：

	$ git checkout master
	我们把dev分支的工作成果合并到master分支上：

	$ git merge dev ；git merge命令用于合并指定分支到当前分支。
20：就可以放心地删除dev分支了：

	$ git branch -d dev
21：