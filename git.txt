1：通过git init命令把这个目录变成Git可以管理的仓库：
	$ git init
2：用命令git add告诉Git，把文件添加到仓库：

	$ git add readme.txt
3：用命令git commit告诉Git，把文件提交到仓库：
	$ git commit -m "wrote a readme file"
4：为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
	$ git add file1.txt
	$ git add file2.txt file3.txt
	$ git commit -m "add 3 files."
5：运行git status命令看看结果：			git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
	$ git status
	On branch master
	Changes not staged for commit:
	(use "git add <file>..." to update what will be committed)
	(use "git checkout -- <file>..." to discard changes in working directory)
	
		modified:   readme.txt

	no changes added to commit (use "git add" and/or "git commit -a")
6：虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，
	需要用git diff这个命令看看：		git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个distributed单词
		$ git diff readme.txt 
7：版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：
		$ git log
		如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
		$ git log --pretty=oneline
8：现在，我们要把当前版本append GPL回退到上一个版本add distributed，就可以使用git reset命令：

	$ git reset --hard HEAD^
	HEAD is now at e475afc add distributed
	也可以
	$ git reset --hard 1094a按照版本号回退
9：Git提供了一个命令git reflog用来记录你的每一次命令：
	$ git reflog
		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。